SELECT USER
FROM DUAL;
--==>> TWO

SELECT *
FROM tabs;

--○ 관리자 테이블 TBL_ADMIN 생성
CREATE TABLE TBL_ADMIN
( ADMIN_ID  VARCHAR2(20)                                            --관리자 아이디(PK)
, PW        VARCHAR2(20)    CONSTRAINT ADMIN_PW_NN NOT NULL         --관리자 패스워드(NN)
, NAME      VARCHAR2(20)    CONSTRAINT ADMIN_NAME_NN NOT NULL       --관리자 이름
, CONSTRAINT ADMIN_ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);


--○ 교수 테이블 TBL_PROFESSOR 생성 
CREATE TABLE TBL_PROFESSOR
( PRO_ID    VARCHAR2(20)
 ,PW        VARCHAR2(20) 
 ,NAME      VARCHAR2(20) CONSTRAINT PROFESSOR_NAME_NN NOT NULL 
 ,FSSN      CHAR(6) CONSTRAINT PROFESSOR_FSSN_NN NOT NULL
 ,BSSN      CHAR(7) CONSTRAINT PROFESSOR_BSSN_NN NOT NULL 
 ,SIGNDATE  DATE DEFAULT SYSDATE
 ,CONSTRAINT PROFESSOR_PRO_ID_PK PRIMARY KEY(PRO_ID)
);


--○ 학생 테이블 TBL_STUDENT 생성
CREATE TABLE TBL_STUDENT
( STU_ID      VARCHAR2(20)
, PW          VARCHAR2(20)    
, NAME        VARCHAR2(20)     CONSTRAINT STUDENT_NAME_NN NOT NULL
, FSSN        CHAR(6)          CONSTRAINT STUDENT_FSSN_NN NOT NULL
, BSSN        CHAR(7)          CONSTRAINT STUDENT_BSSN_NN NOT NULL
, SIGNDATE    DATE             DEFAULT SYSDATE
, CONSTRAINT STUDENT_STU_ID_PK PRIMARY KEY (STU_ID)
);


--○ 강의실 테이블 TBL_CLASSROOM 생성
CREATE TABLE TBL_CLASSROOM
( CLASS_CODE  NUMBER      
, NAME        VARCHAR2(20) CONSTRAINT CLASSROOM_NAME_NN NOT NULL
, CAPACITY    VARCHAR2(50)
, CONSTRAINT CLASSROOM_CLASS_CODE_PK PRIMARY KEY(CLASS_CODE)
);
ALTER TABLE TBL_CLASSROOM
MODIFY CAPACITY VARCHAR2(50); 


--○ 배점 테이블 TBL_ALLOT 생성
CREATE TABLE TBL_ALLOT
( ALLOT_CODE    NUMBER       
, ATTEND        NUMBER(3) DEFAULT 0
, PRACTICE      NUMBER(3) DEFAULT 0
, WRITTEN       NUMBER(3) DEFAULT 0
, CONSTRAINT ALLOT_ALLOT_CODE_PK PRIMARY KEY(ALLOT_CODE)
, CONSTRAINT ALLOT_TOTAL_CK CHECK((ATTEND + PRACTICE + WRITTEN) = 100)
);

ALTER TABLE TBL_ALLOT
ADD CONSTRAINT ALLOT_TOTAL_CK CHECK((ATTEND + PRACTICE + WRITTEN) = 100);


--○ 과목 테이블 TBL_SUBJECTS 생성
CREATE TABLE TBL_SUBJECTS
( SUB_CODE  NUMBER                                                  --과목코드(PK)
, NAME      VARCHAR2(20)    CONSTRAINT SUBJECTS_NAME_NN NOT NULL    --과목명(NN)
, BOOK      VARCHAR2(50)                                            --교재명
, CONSTRAINT SUBJECTS_SUB_CODE_PK PRIMARY KEY(SUB_CODE)
);


--○ 과정 테이블 TBL_COURSE 생성
CREATE TABLE TBL_COURSE
( COUR_CODE     VARCHAR2(30)
, CLASS_CODE    NUMBER
, STARTDATE     DATE
, ENDDATE       DATE
, LIMIT         NUMBER
, CONSTRAINT COURSE_COUR_CODE_PK PRIMARY KEY(COUR_CODE)
, CONSTRAINT COURSE_CLASS_CODE_FK FOREIGN KEY(CLASS_CODE)
             REFERENCES TBL_CLASSROOM (CLASS_CODE)
, CONSTRAINT COURSE_DATE_INTERVAL CHECK (STARTDATE < ENDDATE)
);

--==>> 변경해야되어서 ALTER 로 변경했음.. 위에꺼는 아예 다 적용된 새로운 구문이라 
--     위에꺼를 했다면 ▼LIMIT 어쩌구 ~ 이거 할 필요없다..!
ALTER TABLE TBL_COURSE
ADD LIMIT NUMBER;


--○ 수강신청 테이블 TBL_REGIST 생성
CREATE TABLE TBL_REGIST
( REG_CODE      NUMBER
 ,STU_ID        VARCHAR2(20)
 ,COUR_CODE     VARCHAR2(30)
 ,REG_DATE      DATE DEFAULT SYSDATE
 ,CONSTRAINT REGIST_REG_CODE_PK PRIMARY KEY(REG_CODE)
 ,CONSTRAINT REGIST_STU_ID_FK FOREIGN KEY(STU_ID)
                        REFERENCES TBL_STUDENT(STU_ID)
 ,CONSTRAINT REGIST_COUR_CODE_FK FOREIGN KEY(COUR_CODE)
                        REFERENCES TBL_COURSE(COUR_CODE)                        
);


--○ 중도하차여부 테이블 TBL_QUIT
CREATE TABLE TBL_QUIT
( QUIT_CODE     NUMBER
 ,REG_CODE      NUMBER
 ,REASON        VARCHAR2(100)
 ,QUIT_DATE     DATE DEFAULT SYSDATE
 ,CONSTRAINT QUIT_QUIT_CODE_PK PRIMARY KEY(QUIT_CODE)
 ,CONSTRAINT QUIT_REG_CODE_FK FOREIGN KEY(REG_CODE)
                        REFERENCES TBL_REGIST(REG_CODE)
);


--○ 개설과목 테이블 TBL_OPSUBJECT 생성
CREATE TABLE TBL_OPSUBJECT
( OPSUB_CODE    NUMBER
, COUR_CODE     VARCHAR2(30)
, SUB_CODE      NUMBER
, PRO_ID        VARCHAR2(20)
, ALLOT_CODE    NUMBER
, STARTDATE     DATE
, ENDDATE       DATE
, CONSTRAINT OPSUBJECT_OPSUB_CODE_PK PRIMARY KEY(OPSUB_CODE)
, CONSTRAINT OPSUBJECT_COUR_CODE_FK FOREIGN KEY(COUR_CODE)
                        REFERENCES TBL_COURSE(COUR_CODE) 
, CONSTRAINT OPSUBJECT_PRO_ID_FK FOREIGN KEY(PRO_ID)
                        REFERENCES TBL_PROFESSOR(PRO_ID) 
, CONSTRAINT OPSUBJECT_ALLOT_CODE_FK FOREIGN KEY(ALLOT_CODE)
                        REFERENCES TBL_ALLOT(ALLOT_CODE) 
, CONSTRAINT OPSUBJECT_DATE_INTERVAL CHECK (STARTDATE < ENDDATE)
);


--○ 성적 테이블 TBL_GRADE 생성
CREATE TABLE TBL_GRADE
( GRADE_CODE    NUMBER
, OPSUB_CODE    NUMBER
, REG_CODE      NUMBER
, ATTEND        NUMBER
, PRACTICE      NUMBER
, WRITTEN       NUMBER
, CONSTRAINT GRADE_GRADE_CODE_PK PRIMARY KEY(GRADE_CODE)
, CONSTRAINT GRADE_OPSUB_CODE_FK FOREIGN KEY(OPSUB_CODE)
             REFERENCES TBL_OPSUBJECT (OPSUB_CODE)
, CONSTRAINT GRADE_REG_CODE_FK FOREIGN KEY(REG_CODE)
             REFERENCES TBL_REGIST(REG_CODE)
);


--○ 강의진행여부 -찬호
CREATE OR REPLACE FUNCTION FN_COURSE
( V_COUR_CODE TBL_COURSE.COUR_CODE%TYPE
)
RETURN VARCHAR2
IS
    V_STARTDATE TBL_COURSE.STARTDATE%TYPE;
    V_ENDDATE   TBL_COURSE.ENDDATE%TYPE;
    
    V_RESULT VARCHAR2(40);
BEGIN
    SELECT STARTDATE, ENDDATE INTO V_STARTDATE, V_ENDDATE
    FROM TBL_COURSE
    WHERE COUR_CODE = V_COUR_CODE;
    
    IF (SYSDATE < V_STARTDATE)
        THEN V_RESULT := '개설 예정';
    ELSIF ((V_STARTDATE < SYSDATE) AND (V_ENDDATE > SYSDATE )) 
        THEN V_RESULT := '진행 중';
    ELSIF (V_ENDDATE < SYSDATE)
        THEN V_RESULT := '과정 종료';
    ELSE
        V_RESULT := '과정확인불가';
    END IF;
    
    RETURN V_RESULT;
    
END;
--==>> Function FN_COURSE이(가) 컴파일되었습니다


---혜진님이주신거
CREATE OR REPLACE VIEW VIEW_PROFESSOR_COUR
AS
SELECT P.NAME "교수명", O.COUR_CODE "배정과목", O.STARTDATE "과목시작일", O.ENDDATE "과목종료일"
     , S.BOOK "교재명", R.NAME "강의실", FN_COURSE(C.COUR_CODE) "강의진행여부"
FROM TBL_PROFESSOR P LEFT JOIN TBL_OPSUBJECT O
ON P.PRO_ID = O.PRO_ID
    LEFT JOIN TBL_SUBJECTS S
    ON O.SUB_CODE = S.SUB_CODE
    LEFT JOIN TBL_COURSE C
    ON O.COUR_CODE = C.COUR_CODE
    LEFT JOIN TBL_CLASSROOM R
    ON C.CLASS_CODE = R.CLASS_CODE;
--==>> View VIEW_PROFESSOR_COUR이(가) 생성되었습니다.

SELECT *
FROM VIEWS;



---------------------------------------
------------------- 필기

CREATE OR REPLACE FUNCTION FN_SCORE_WRITTEN
( V_GRADE_CODE TBL_GRADE.GRADE_CODE%TYPE
)
RETURN NUMBER
IS
    V_OPSUB_CODE TBL_GRADE.OPSUB_CODE%TYPE;
    V_WRITTEN    TBL_GRADE.WRITTEN%TYPE;    --필기점수
    V_ALLOT_CODE TBL_ALLOT.ALLOT_CODE%TYPE;
    
    V_WRITTEN2   TBL_GRADE.WRITTEN%TYPE;     --필기배점
    
    V_RESULT NUMBER;
  
BEGIN
    
    -- 점수테이블 (점수, 개설과목코드)
    SELECT OPSUB_CODE, WRITTEN INTO V_OPSUB_CODE, V_WRITTEN
    FROM TBL_GRADE 
    WHERE GRADE_CODE = V_GRADE_CODE;
    
    -- 개설과목테이블 (배점코드)
    SELECT ALLOT_CODE INTO V_ALLOT_CODE
    FROM TBL_OPSUBJECT
    WHERE OPSUB_CODE = V_OPSUB_CODE;
    
    -- 배점테이블 (필기배점)
    SELECT WRITTEN INTO V_WRITTEN2
    FROM TBL_ALLOT
    WHERE ALLOT_CODE = V_ALLOT_CODE;


    V_RESULT := (V_WRITTEN * (V_WRITTEN2/100));   

    RETURN V_RESULT;
    
END;


CREATE OR REPLACE FUNCTION FN_SCORE_ATTEND
( V_GRADE_CODE TBL_GRADE.GRADE_CODE%TYPE
)
RETURN NUMBER
IS
    V_OPSUB_CODE TBL_GRADE.OPSUB_CODE%TYPE;
    V_ATTEND     TBL_GRADE.ATTEND%TYPE;     --출결점수
    V_ALLOT_CODE TBL_ALLOT.ALLOT_CODE%TYPE;
    
    V_ATTEND2     TBL_GRADE.ATTEND%TYPE;     --출결배점
    V_RESULT NUMBER;
  
BEGIN
    
    -- 점수
    SELECT OPSUB_CODE, ATTEND INTO V_OPSUB_CODE, V_ATTEND
    FROM TBL_GRADE
    WHERE GRADE_CODE = V_GRADE_CODE;
    
    -- 배점코드
    SELECT ALLOT_CODE INTO V_ALLOT_CODE
    FROM TBL_OPSUBJECT
    WHERE OPSUB_CODE = V_OPSUB_CODE;
    
    -- 배점
    SELECT ATTEND INTO V_ATTEND2
    FROM TBL_ALLOT
    WHERE ALLOT_CODE = V_ALLOT_CODE;

    V_RESULT := (V_ATTEND * (V_ATTEND2/100));
    

    RETURN V_RESULT;
    
END;

--------- 실기
CREATE OR REPLACE FUNCTION FN_SCORE_PRACTICE
( V_GRADE_CODE TBL_GRADE.GRADE_CODE%TYPE
)
RETURN NUMBER
IS
    V_OPSUB_CODE TBL_GRADE.OPSUB_CODE%TYPE;
    V_PRACTICE   TBL_GRADE.PRACTICE%TYPE;   --실기점수
    V_ALLOT_CODE TBL_ALLOT.ALLOT_CODE%TYPE;
    V_PRACTICE2   TBL_GRADE.PRACTICE%TYPE;   --실기배점
    V_RESULT NUMBER;
BEGIN
    
    -- 점수
    SELECT OPSUB_CODE, PRACTICE INTO V_OPSUB_CODE, V_PRACTICE
    FROM TBL_GRADE
    WHERE GRADE_CODE = V_GRADE_CODE;
    
    -- 배점코드
    SELECT ALLOT_CODE INTO V_ALLOT_CODE
    FROM TBL_OPSUBJECT
    WHERE OPSUB_CODE = V_OPSUB_CODE;
    
    -- 배점
    SELECT PRACTICE INTO V_PRACTICE2
    FROM TBL_ALLOT
    WHERE ALLOT_CODE = V_ALLOT_CODE;

    V_RESULT := (V_PRACTICE * (V_PRACTICE2/100));
    
    RETURN V_RESULT;
    
END;

--==>>
/*

Function FN_SCORE_WRITTEN이(가) 컴파일되었습니다.


Function FN_SCORE_ATTEND이(가) 컴파일되었습니다.


Function FN_SCORE_PRACTICE이(가) 컴파일되었습니다.

*/
